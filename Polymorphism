#include<iostream>
#include<stdlib.h>
#include<math.h>
using namespace std;

class CShape {
public:
	virtual double Area() = 0;
	virtual void PrintIfo() = 0;//在本程序中并不需要特殊的CShape几何图形；
};
class CRactangle :public CShape
{
public:
	int w, h;
	virtual double Area();
	virtual void PrintIfo();
};

class CCircle :public CShape
{
public:
	int r;
	virtual double Area();
	virtual void PrintIfo();
};

class CTriangle :public CShape
{
public:
	int a, b, c;
	virtual double Area();
	virtual void PrintIfo();
};

double CRactangle::Area()
{
	return w * h;
}
void CRactangle::PrintIfo()
{
	cout << "Ractangle::" << Area() << endl;
}

double CCircle::Area()
{
	return 3.14 * r * r;
}
void CCircle::PrintIfo()
{
	cout << "CCircle::" << Area() << endl;
}

double CTriangle::Area()
{
	double p = (a + b + c) / 2.0;
	return sqrt(p * (p - a) * (p - b) * (p - c));
}
void CTriangle::PrintIfo()
{
	cout << "CTriangle::" << Area() << endl;
}

CShape* pShapes[100];
int MyCompare(const void* s1, const void* s2);

int main()
{
	int n;
	CRactangle* pr; CCircle* pc; CTriangle* pt;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		char c;
		cin >> c;
		switch (c)
		{
		case 'R':
			pr = new CRactangle();
			cin >> pr->w >> pr->h;
			pShapes[i] = pr;
			break;
		case 'C':
			pc = new CCircle();
			cin >> pc->r;
			pShapes[i] = pc;
			break;
		case 'T':
			pt = new CTriangle();
			cin >> pt->a >> pt->b >> pt->c;
			pShapes[i] = pt;
			break;
		}
	}
	qsort(pShapes, n, sizeof(CShape*), MyCompare);
	for (int i = 0; i < n; i++)
	{
		pShapes[i]->PrintIfo();
	}
	return 0;
}

int MyCompare(const void* s1, const void* s2)
{
	double a1, a2;
	CShape** p1, ** p2;
	p1 = (CShape**)s1;
	p2 = (CShape**)s2;

	a1 = (*p1)->Area();
	a2 = (*p2)->Area();

	if (a1 < a2)
		return -1;
	else if (a2 < a1)
		return 1;
	else
		return 0;
}
